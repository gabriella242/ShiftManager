@model IEnumerable<ShiftManagerProject.Models.FinalShift>

@{
    ViewBag.Title = "This Week's Shifts";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int counter = 1;

    List<string> WeekDay = new List<string>(new string[] { "", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" });

    DateTime nextSunday = DateTime.Now.AddDays(1);
    while (nextSunday.DayOfWeek != DayOfWeek.Sunday)
    { nextSunday = nextSunday.AddDays(1); }
    var NextWeek = Convert.ToDateTime(nextSunday).ToString("dd/MM/yyyy");


    List<SelectListItem> employees = new List<SelectListItem>();
    employees.Add(new SelectListItem { Text = "All", Value = "All" });
    foreach (var item in Model.Select(d => d.Name).Distinct())
    {
        employees.Add(new SelectListItem
        {
            Text = item,
            Value = item
        });
    };
}

<link rel="stylesheet" type="text/css" href="~/Content/FinalShiftIndex.css" />
<script src="https://code.jquery.com/jquery-3.3.1.min.js"
        integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
        crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4" crossorigin="anonymous"></script>


@if (!(Model.Any()))
{
    <br /><br />
    <h3 class="title">No Shifts Available</h3>
}
else
{
    <br /><br />
    <h2>Next Week's Shifts - @NextWeek</h2>
    <br /><br />

    <div class="container">
        <div class="row">
            <div class="col">
            </div>
            <div class="col-9">
            </div>
            <div class="col">
                <div class="btn-group" role="group" aria-label="Button group with nested dropdown">
                    <button type="button" class="btn btn-success">Actions</button>
                    <div class="btn-group" role="group">
                        <button id="btnGroupDrop1" type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
                        <div class="dropdown-menu" aria-labelledby="btnGroupDrop1" style="text-align:center;">
                            @Html.ActionLink("Remake", "NewClose", "FinalShifts", null, new { @class = "dropdown-item" })
                            @Html.ActionLink("Save Schedule", "SaveToRemake", "FinalShifts", null, new { @class = "dropdown-item" })
                            @Html.ActionLink("Download To Excel", "Download", "FinalShifts", null, new { @class = "dropdown-item" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <br />
    <div class="col-1">
        <p id="NoOfShifts"></p>
    </div>
    <br /><br />
    <div class='table-responsive'>
        <table id="tablePreview" class="table table-hover table-bordered table-condensed">
            <tr class="table-active headertbl">
                <th style="text-align:center;">
                    <p id="NoOfShifts"></p>
                </th>
                @foreach (var item in Model.Select(x => x.Day).Distinct())
                {
                    <th>
                        @Html.DisplayFor(x => item)
                    </th>
                }
            </tr>

            <tr class="bgcolor">
                <td class="table-info bold">
                    @Html.DisplayNameFor(model => model.Morning)
                </td>

                @foreach (var day in Model.Select(x => x.Day).Distinct())
                {
                    <td class="tbl">
                        @foreach (var Mshift in Model.Where(x => x.Day == WeekDay[counter] && x.Morning == true).OrderBy(m => m.OfDayType).ToList())
                        {
                            if (Mshift.Name.IsEmpty())
                            {
                                @Html.ActionLink("Update", "Edit", new { id = Mshift.ID }, new { @class = "badge badge-danger" })
                            }
                            else
                            {
                                @Html.ActionLink(Mshift.Name, "Edit", new { id = Mshift.ID }, new { @class = Mshift.Name })
                            }
                            <br />
                        }
                    </td>
                    counter++;
                }
            </tr>

            @{ counter = 1; }

            <tr class="bgcolor">
                <td class="table-info bold">
                    @Html.DisplayNameFor(model => model.Afternoon)
                </td>


                @foreach (var day in Model.Select(x => x.Day).Distinct())
                {
                    <td class="tbl">
                        @foreach (var Mshift in Model.Where(x => x.Day == WeekDay[counter] && x.Afternoon == true).OrderBy(m => m.OfDayType).ToList())
                        {
                            if (Mshift.Name.IsEmpty())
                            {
                                @Html.ActionLink("Update", "Edit", new { id = Mshift.ID }, new { @class = "badge badge-danger" })
                            }
                            else
                            {
                                @Html.ActionLink(Mshift.Name, "Edit", new { id = Mshift.ID }, new { @class = Mshift.Name })
                            }
                            <br />
                        }
                    </td>
                    counter++;
                }
            </tr>

            @{ counter = 1; }

            <tr class="bgcolor">
                <td class="table-info bold">
                    @Html.DisplayNameFor(model => model.Night)
                </td>


                @foreach (var day in Model.Select(x => x.Day).Distinct())
                {
                    <td class="tbl">
                        @foreach (var Mshift in Model.Where(x => x.Day == WeekDay[counter] && x.Night == true).OrderBy(m => m.OfDayType).ToList())
                        {
                            if (Mshift.Name.IsEmpty())
                            {
                                @Html.ActionLink("Update", "Edit", new { id = Mshift.ID }, new { @class = "badge badge-danger" })
                            }
                            else
                            {
                                @Html.ActionLink(Mshift.Name, "Edit", new { id = Mshift.ID }, new { @class = Mshift.Name })
                            }
                            <br />
                        }
                    </td>
                    counter++;
                }
            </tr>
        </table>
    </div>
    <div id="se-pre-con"></div>
}

    <div class="container">
        <div class="row pads">
            <a class="btn btn-info" data-toggle="modal" href="#ignismyModal">Message Employees</a>
            <div class="modal fade" id="ignismyModal" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label=""><span>×</span></button>
                        </div>

                        <div class="modal-body">
                            <div class="thank-you-pop">
                                <h1>Message</h1>
                                <form accept-charset="UTF-8" action="@Url.Action("Message", "FinalShifts")" method="POST">
                                    <h6>@Html.DropDownList("employees", employees, "--Select Employee--", new { @class = "control-label col-md-2 dropdownboxes" })</h6>
                                    <textarea class="span4" id="new_message" name="new_message"
                                              placeholder="Type in your message" rows="5"></textarea>
                                    <h6></h6>
                                    <label for="info" class="btn btn-info">SMS <input type="checkbox" id="info" class="badgebox" name="sms" value="true"><span class="badge">&check;</span></label>
                                    <label for="success" class="btn btn-success">EMAIL <input type="checkbox" id="success" class="badgebox" value="true" name="email"><span class="badge">&check;</span></label>
                                    <h6 class="pull-right"></h6>
                                    <button class="btn btn-outline-danger" type="submit" id="loadmsg">Send Message</button>
                                </form>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>

<div class="container">
    <div class="row">
        <div class="col-12">
            @{
                if (@ViewBag.admin != 0 && Model.Any())
                {
                    <h3>Offically Closed!</h3>
                }
                else
                {
                    if (Model.Any())
                    {
                        @Html.ActionLink("Submit", "Send", "", new { @class = "btn btn-outline-danger", @id = "loadNow" })
                    }
                }
            }
        </div>
    </div>
</div>


<script>
    $(document).ready(function () {

        $("#loadmsg").click(function () {
            document.getElementById("se-pre-con").classList.add("se-pre-con");
            myVar = setTimeout(showPage, 85000);
        });

        $("#loadNow").click(function () {
            document.getElementById("se-pre-con").classList.add("se-pre-con");
            myVar = setTimeout(showPage, 85000);
        });

        function showPage() {
            document.getElementById("se-pre-con").classList.remove("se-pre-con");
        }

        $('.dropdown-toggle').dropdown()

        $('a:contains("UpdateMe!")').addClass('badge badge-danger');

        var obj = {};
        $('.tbl').children().each(function () {
            $.each((this.className || '').split(/\s+/), function (i, v) {
                obj[v] = true;
            })
        })
        var classes = $.map(obj, function (val, key) {
            return key == '' ? undefined : key;
        })

        var num = 0;
        var elms = {};
        var n = {}, nclasses = classes.length;
        function changeColor(classname, color) {
            var curN = n[classname];
            for (var i = 0; i < curN; i++) {
                elms[classname][i].style.backgroundColor = color;
            }
            num = i;
        }

        for (var k = 0; k < nclasses; k++) {
            var curClass = classes[k];
            elms[curClass] = document.getElementsByClassName(curClass);
            n[curClass] = elms[curClass].length;
            var curN = n[curClass];
            for (var i = 0; i < curN; i++) {
                elms[curClass][i].onmouseover = function () {
                    changeColor(this.className, "yellow");
                    document.getElementById("NoOfShifts").innerHTML = num + " Shifts";
                };
                elms[curClass][i].onmouseout = function () {
                    changeColor(this.className, "white");
                    document.getElementById("NoOfShifts").innerHTML = "";
                };
            }
        };

    });
</script>
<br /><br />


